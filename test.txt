    def __load_data(self, file_nm: Union[Path, S3Path], file_tp: str) -> None:
        r"""
        Load the data from a .csv file to a pd.DataFrame.

        Parameters
        ----------
        file_nm : str
            Name of .csv file to extract data from.
        file_tp : str
            Type of .csv file.
            "mig_mtrx" = The .csv file contains migration matrix data.
            "pd_vect" = The .csv file contains information on PD vector and
                        PD groups.

        Raises
        ------
        ValueError
            Incorrect file type.

        Returns
        -------
        data :pd.DataFrame
            DataFrame holding the values of the .csv file

        """
        if file_nm.suffix == ".csv": 
            data = pd.read_csv(str(file_nm))
        
        elif file_nm.parent.suffix == ".parquet":
            data = pd.read_parquet(str(file_nm))
        else:
            raise ValueError(f"Unsupported file format: {file_nm}. Choose either parquet or csv")

        if (file_tp == "mig_mtrx"):
            if (data["PROBABILITY"].dtype == "object"):
                if data["PROBABILITY"].str.contains("%").any():
                    data["PROBABILITY"] = data["PROBABILITY"].str.rstrip("%")\
                        .astype("float64") / 100
            else:
                data["PROBABILITY"] = data["PROBABILITY"].astype("float64")

            if (data["NAME"].nunique() / len(data["NAME"]) < 0.5):
                data["NAME"] = data["NAME"].astype("category")
            data["PARTITION_KEY"] = data["PARTITION_KEY"].astype("uint32")

        elif (file_tp == "pd_vect"):
            if (data["BASE_PD"].dtype == "object"):
                if data["BASE_PD"].str.contains("%").any():
                    data["BASE_PD"] = data["BASE_PD"].str.rstrip("%")\
                        .astype("float64") / 100
            else:
                data["BASE_PD"] = data["BASE_PD"].astype("float64")

            if data["MODEL_NAME"].nunique() / len(data["MODEL_NAME"]) < 0.5:
                data["MODEL_NAME"] = data["MODEL_NAME"].astype("category")

            data["PARTITION_KEY"] = data["PARTITION_KEY"].astype("uint32")
            data["STATUS"] = data["STATUS"].astype("category")

        else:
            raise ValueError("Wrong file type! The function supports",
                             "either migration matrix of PD vector",
                             "file type.")

        self.extract = data
