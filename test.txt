#test_config.py

import argparse
from pathlib import Path
import subprocess
import os

def validate_date(date_str):
    from datetime import datetime
    try:
        datetime.strptime(date_str, '%Y%m%d')
        return True
    except ValueError:
        return False

def fetch_data(date, submodule):
    local_base_path = Path(f'tests/{submodule}/data')
    data_path = local_base_path / date
    latest_path = local_base_path / 'latest'

    if not validate_date(date):
        raise ValueError("Invalid date format. Please use YYYYMMDD.")

    # Simulate fetching data for the specified date
    if not data_path.exists():
        # Simulate the S3 download command here
        subprocess.run(["python", "import_data.py", "--date", date, "--submodule", submodule], check=True)

    # Update the 'latest' symlink to point to the most recent data
    update_latest_symlink(local_base_path)

    return data_path

def update_latest_symlink(base_path):
    from datetime import datetime

    dates = [d for d in base_path.iterdir() if d.is_dir() and validate_date(d.name)]
    if not dates:
        raise RuntimeError("No valid date directories found.")
    
    latest_date_path = max(dates, key=lambda d: datetime.strptime(d.name, '%Y%m%d'))
    latest_path = base_path / 'latest'
    
    if latest_path.exists() and latest_path.is_symlink():
        latest_path.unlink()
    elif latest_path.exists() and latest_path.is_dir():
        shutil.rmtree(latest_path)
    latest_path.symlink_to(latest_date_path)
    print(f"Updated 'latest' symlink to {latest_date_path}")

def main():
    parser = argparse.ArgumentParser(description='Test configuration')
    parser.add_argument('--date', type=str, default='latest', help='Date of the test data (e.g., 20231231).')
    args = parser.parse_args()

    global TEST_DATE
    TEST_DATE = args.date

if __name__ == '__main__':
    main()


# test.py

import unittest
from pathlib import Path
import sys

# Import the centralized test config
sys.path.append(str(Path(__file__).parent.parent.parent))
from test_config import fetch_data

# Fetch data path for the current submodule
data_path = fetch_data('20231231', 'mig_mtrxs')

class TestMigMtrxs(unittest.TestCase):
    def test_something(self):
        input_file = data_path / 'inputs' / 'input_file1.csv'
        # Load and test the data
        self.assertTrue(input_file.exists())

if __name__ == '__main__':
    unittest.main()




# Import data

import os
import shutil
from pathlib import Path
import boto3
import argparse
from datetime import datetime

def validate_date(date_str):
    try:
        datetime.strptime(date_str, '%Y%m%d')
        return True
    except ValueError:
        return False

def download_from_s3(bucket_name, s3_path, local_path):
    s3 = boto3.client('s3')
    os.makedirs(local_path, exist_ok=True)
    
    for obj in s3.list_objects_v2(Bucket=bucket_name, Prefix=s3_path).get('Contents', []):
        file_key = obj['Key']
        file_name = os.path.basename(file_key)
        if file_name:  # Ensure it's not a directory
            s3.download_file(bucket_name, file_key, os.path.join(local_path, file_name))
    print(f"Downloaded data from s3://{bucket_name}/{s3_path} to {local_path}")

def update_latest_symlink(base_path):
    if base_path.exists() and base_path.is_symlink():
        base_path.unlink()
    elif base_path.exists() and base_path.is_dir():
        shutil.rmtree(base_path)
    base_path.symlink_to(base_path)
    print(f"Updated 'latest' symlink to {base_path}")

def main(date, submodule):
    if not validate_date(date):
        print("Invalid date format. Please use YYYYMMDD.")
        return
    
    bucket_name = 'your-s3-bucket'
    s3_base_path = f'path/to/your/data/{submodule}'
    local_base_path = Path(f'tests/{submodule}/data')

    # Create the path for the specified date
    data_path = local_base_path / date
    s3_path = f"{s3_base_path}/{date}"

    # Download data from S3
    download_from_s3(bucket_name, s3_path, data_path)

    # Update the 'latest' symlink to point to the most recent data
    update_latest_symlink(local_base_path)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Import data for a specific date.')
    parser.add_argument('--date', type=str, required=True, help='Date of the data to import (e.g., 20231231).')
    parser.add_argument('--submodule', type=str, required=True, help='Submodule name (e.g., mig_mtrxs).')
    args = parser.parse_args()

    main(args.date, args.submodule)




import sys
import subprocess
import os
import argparse

def main():
    # Fetch the command line arguments
    parser = argparse.ArgumentParser(description='Run test suite with a specific date.')
    parser.add_argument('--date', type=str, default='latest', help='Date of the test data (e.g., 20231231).')
    args = parser.parse_args()

    # Set the environment variable for the test date
    os.environ['TEST_DATE'] = args.date

    # Run the unit tests
    subprocess.run([sys.executable, '-m', 'unittest', 'discover', 'tests/unit'], check=True)

    # Run the integration tests
    subprocess.run([sys.executable, '-m', 'unittest', 'discover', 'tests/integration'], check=True)

if __name__ == '__main__':
    main()




import os
from pathlib import Path
import argparse
from datetime import datetime

def validate_date(date_str):
    try:
        datetime.strptime(date_str, '%Y%m%d')
        return True
    except ValueError:
        return False

def main():
    parser = argparse.ArgumentParser(description='Set test date environment variable.')
    parser.add_argument('--date', type=str, default='latest', help='Date of the test data (e.g., 20231231).')
    args = parser.parse_args()

    if not validate_date(args.date):
        raise ValueError("Invalid date format. Please use YYYYMMDD.")

    os.environ['TEST_DATE'] = args.date
    print(f"Environment variable TEST_DATE set to {args.date}")

if __name__ == '__main__':
    main()





